/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
defaultTasks 'assemble'
 
/* Configure root project */
allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  repositories {
    mavenCentral()
    maven {
      // TODO - is this the right repo to use?
      // related?... watson-iot-0.1.1.jar ends up referencing org.eclipse.paho.client.mqttv3-1.0.3-SNAPSHOT.jar
      url 'https://repo.eclipse.org/content/repositories/paho-snapshots/'
    }
  }
  
  project.version = build_version
}

apply plugin: 'java'


ext {
  commithash_error = ''
  commithash = {
    try {
      return "git rev-parse --short HEAD".execute().text.trim()
    } catch (Exception e) {
      ext.commithash_error = e
      return ''
    }
  }()
  now = new Date()
  DSTAMP = String.format('%tY%<tm%<td', now)
  TSTAMP = String.format('%tH%<tM', now)
                   
  target_dir = "$distsDir"
  target_java8_dir = "$target_dir/java8"
  target_java8_ext_dir = "$target_java8_dir/ext"
  target_java7_dir = "$target_dir/java7"
  target_android_dir = "$target_dir/android"
  target_docs_dir = "$target_dir/docs"
  target_javadoc_dir = "$target_docs_dir/javadoc"
  target_report_dir = "$target_dir/reports"
 
  // project groups whose jars are to be placed in target_java8_lib
  // instead of the default "$target_java8_dir/$simpleProjectGroup/$project.name/lib"
  //         e.g., "$target_java8_dir/lib" for api/topology
  //         "$target_java8_dir/connectors/iotp/lib" for connectors/iotp
  //
  target_java8_lib_groups = ["api", "providers", "runtime", "spi"]
  
  // TODO can these be deduced by the absence of a build.gradle for the project?
  aggregatorOnlyProjects = [
    ':android',
    ':analytics', ':api', ':apps',
    ':connectors', ':console',
    ':platform', ':providers',
    ':runtime', ':samples', ':spi',
    ':test', ':utils'
  ]
  
  filteredSubprojects = subprojects*.findAll { 
    project -> !aggregatorOnlyProjects.contains(project.path)
  }
  
  // for manifest classpath hackery
  jarNameToProjectMap = [:]  // e.g., "edgent.connectors.iotp-0.4.0.jar" => Project(':component:iotp')
  projectToJarNameMap = [:]
  
  // Edgent core external dependencies
  core_ext_dependencies = ['com.google.code.gson:gson:2.2.4',
                   'org.slf4j:slf4j-api:1.7.12',
                   'io.dropwizard.metrics:metrics-core:3.1.2']
  copied_core_ext_dependencies_jars = false
  
  // Edgent Samples external dependencies
  samples_ext_dependencies = ['org.slf4j:slf4j-jdk14:1.7.12']
  copied_samples_ext_dependencies_jars = false

  // Edgent tests external dependencies
  tests_ext_dependencies = ['org.slf4j:slf4j-jdk14:1.7.12']
  copied_tests_ext_dependencies_jars = false
  
  common_ext_dependencies = [
    core_ext_dependencies,
    samples_ext_dependencies,
    // tests_ext_dependencies, // omit as tests aren't included in release tgz
  ].flatten()
}

def recordProjectJar(Project proj) {
  // manifest classpath hackery: update maps of project's jar <=> Project
  // This, and use of these maps, is fallout from floundering
  // trying to leverage the gradle object model for dealing with
  // project (and dependent project) artifacts and/or other nice
  // gradle declaritive-isms for dealing with this.
  def jarName = "${proj.group}.${proj.name}-${project.version}.jar"
  jarNameToProjectMap[jarName] = proj
  projectToJarNameMap[proj] = jarName
  //println "#### $proj.path updated jar <=> project maps: $jarName"
}

def String mkJarNameFromSpec(String jarSpec) {
  // e.g. 'com.google.code.gson:gson:2.2.4' => gson-2.2.4.jar
  return jarSpec.split(':')[1] + '-' + jarSpec.split(':')[2] + '.jar'
}

def String stripJarNameVersion(String jarName) {
  // e.g., edgent.api.topology-0.4.0.jar => edgent.api.topology.jar
  return jarName.substring(0, jarName.lastIndexOf('-')) + '.jar'
}

def String getSimpleProjectGroup(Project proj) {
  // e.g., 'edgent.api' => 'api'
  return "$proj.group".replace("edgent.", "")
}

// create a path to dir2 relative to dir1
// e.g., dir1:'lib', dir2:'connectors/iotp/lib' => ../connectors/iotp/lib
def String mkRelativePath(File dir1, File dir2) {
  def relPath = dir1.toPath().relativize(dir2.toPath())
  //println "#### relPath: "+relPath+"   dir1:"+dir1+" dir2:"+dir2
  return relPath.toString()
}
def String mkRelativePath(String dir1, String dir2) {
  return mkRelativePath(new File(dir1), new File(dir2))
}

// e.g., =>  "lib" or "<component>/<subcomponent>/lib"
def String getTargetRelProjDir(Project proj, String kind) {  // kind: "lib", "ext"
  // the general case location
  def simpleProjectGroup = getSimpleProjectGroup(proj);
  def relProjDir = "$simpleProjectGroup/$proj.name/$kind"
   
  // special cases
  if (target_java8_lib_groups.contains(simpleProjectGroup)) {
    relProjDir = "$kind"
  }
  else if ('samples' == simpleProjectGroup) {
    relProjDir = "$simpleProjectGroup/$kind"
  }
   
  return relProjDir
}

// Get paths relative to the project's dir in the target-dir
// to the project's immediate-only dependant project's jars
// in their project's dir in the target dir
// 
// e.g., returns ['../../../lib/edgent.api.topology.jar', ...]
def Collection getTargetRelDirectDependantProjJars(Project proj) {

  def directDependantProjects = proj.configurations.compile.dependencies
            .withType(ProjectDependency.class)
            .collect { it.dependencyProject }
  //println "#### $proj.path directDependantProjects: $directDependantProjects"
  
  def directDependantProjJars = directDependantProjects.collect {
    def relProjDirInTarget = getTargetRelProjDir(it, 'lib')
    def jarName = projectToJarNameMap[it]
    "$relProjDirInTarget/$jarName"
  }
  
  // make relative paths from the project's dir in targetDir to the
  // jars in the dependent projects' dir in targetDir
  def myProjDirInTargetDir = getTargetRelProjDir(proj, 'lib')
  def relDependantJars = directDependantProjJars.collect {
    mkRelativePath(myProjDirInTargetDir, it)
  }
  //println "#### $proj.path relDependantJars: $relDependantJars"
  return relDependantJars
}

// e.g., returns ['../../../ext/gson-2.2.4.jar', ...]
def Collection getTargetRelDependantCommonExtJars(Project proj, Collection ext_dependencies) {
  // make relative paths from the project's dir in targetDir to the
  // "ext" dir in targetDir (target_java8_ext_dir)
  def myProjDirInTargetDir = getTargetRelProjDir(proj, 'lib')
  def relDependantJars = ext_dependencies.collect {
    jarSpec ->
      def jarName = mkJarNameFromSpec jarSpec
      def relativeDependantJarDir = mkRelativePath(myProjDirInTargetDir, 'ext')
      "$relativeDependantJarDir/$jarName"
  }
  //println "#### $proj.path relDependantJars: $relDependantJars"
  return relDependantJars
}

def getProjectExtDepFiles(Project proj) { // project's direct ext deps and their transitive deps
  // TODO suspect this is picking up ext dependencies of transitive **project** dependencies???
  def allExtDepFiles = proj.configurations.runtime.files { it instanceof ExternalDependency }
  logger.info "$proj.path allExtDepFiles: "+allExtDepFiles
  return allExtDepFiles
}
 
def getProjectNonCommonExtDepFiles(Project proj) {
  // filter out "common" (target_java8_ext_dir) external dependencies
  def commonExtJarNames = common_ext_dependencies.collect {
    mkJarNameFromSpec it
  }
  def filteredExtDepFiles = getProjectExtDepFiles(proj).findAll {
    ! commonExtJarNames.contains(it.getName())
  }
  return filteredExtDepFiles
}

// Get paths relative to the project's lib dir in the target-dir
// to the project's immediate external jar dependencies (and their dependencies
// transitively) in the project's ext dir in the target dir
//
// Should NOT include any external dependencies from the project's dependant *projects* (transitively)
// TODO fix that
// 
// e.g., returns ['../ext/jetty-...', ...]
def Collection getTargetRelDependantProjExtJars(Project proj) {
  def myProjLibDirInTargetDir = getTargetRelProjDir(proj, 'lib')
  def myProjExtDirInTargetDir = getTargetRelProjDir(proj, 'ext')
  def relProjExtDirPath = mkRelativePath(myProjLibDirInTargetDir, myProjExtDirInTargetDir)
    
  // assumes updateTargetDir task copies all the project's ext dependencies
  // to <projectDirInTarget>/ext
  
  def relProjExtDeps = getProjectNonCommonExtDepFiles(proj).collect {
    file -> "$relProjExtDirPath/$file.name"
  }
  //println "#### $proj.path relProjExtDeps: $relProjExtDeps"
  return relProjExtDeps
}

def String mkManifestClassPath(Project proj) {
  // The manifest's classpath needs to include the project's:
  // - immediate-only dependant edgent jars (not transitive and not their ext deps)
  // - "other" dependant external jars - e.g., samples_ext_dependencies
  // - immediate dependant external jars and their transitive deps
  // - the core_ext_dependencies jars
  
  def depProjJars = getTargetRelDirectDependantProjJars proj
  depProjJars = depProjJars.collect { stripJarNameVersion it }
  
  def projExtJars = getTargetRelDependantProjExtJars proj
  
  // unfortunate to include these if project didn't declare them as a dependency
  def coreExtJars = getTargetRelDependantCommonExtJars(proj, core_ext_dependencies)
  
  def otherExtJars = []
  if (proj.path ==~ '^:samples.*') {
     otherExtJars.addAll getTargetRelDependantCommonExtJars(proj, samples_ext_dependencies)
  }
    
  def jars = []
  jars.addAll depProjJars
  jars.addAll otherExtJars
  jars.addAll projExtJars
  jars.addAll coreExtJars
    
  def classPathStr = jars.join(' ')
  //println "#### $proj.path manifest-classPath: $classPathStr"
  return classPathStr
}

gradle.taskGraph.whenReady {taskGraph ->
  if (taskGraph.hasTask(test)) {
    println "\nHINTs: Use the '--tests <testClassNamePattern>[.<testMethodNamePattern>]' option to select specific test classes or methods."
    println "    ./gradlew :api:topology:test --tests '*JsonFunctionsTest'"
    println "    ./gradlew :api:topology:test --tests '*JsonFunctionsTest.testBytes'"
    println "Use the 'cleanTest' task to force a rerun of a previously successful test task:"
    println "    ./gradlew :api:topology:cleanTest :api:topology:test"
    println "    ./gradlew cleanTest test"
    println ""
    sleep 2
  }
}

/* Configure subprojects */
subprojects {

  // ignore aggregator only projects so we don't assemble empty jars, etc for them.
  if (aggregatorOnlyProjects.contains(project.path)) {
    return
  }

  apply plugin: 'maven-publish'
  apply plugin: 'java'
  apply plugin: "jacoco"
 
  if (buildFile.isFile() && !buildFile.exists()) {
    configurations.create('default')
    return
  }
  
  assemble { // in configure phase...
    recordProjectJar(project)
  }

  if (["javax.websocket-client", "javax.websocket-server", "edgent.javax.websocket"].contains(project.name)) {
    archivesBaseName = "${project.name}"
  } else {
    archivesBaseName = "${rootProject.name}${project.path.replace(':', '.')}"
  }

  dependencies {
    testCompile 'junit:junit:4.10'
    testRuntime 'org.slf4j:slf4j-jdk14:1.7.12'
  }

  ext.addCompileTestDependencies = { String... deps ->
    deps.each { dep ->
      dependencies {
        testCompile project(dep).sourceSets.test.output
      }
      compileTestJava {
        dependsOn "${dep}:testClasses"
      }
    }
  }

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  def compileOptions = {
    options.debugOptions.debugLevel = 'source,lines,vars'
    options.verbose = logger.isDebugEnabled()
    options.listFiles = logger.isInfoEnabled()
    options.deprecation = true
    options.encoding = 'UTF-8'
  }
  compileJava {
    configure compileOptions
  }
  compileTestJava {
    configure compileOptions
  }

  test {
    // TODO fix this - this dependency handling shouldn't occur here,
    // rather :console:server should dependOn :console:servlets
    // (really the server doesn't exist w/o the servlets)
    if(it.path == ":test:fvtiot" ||  it.path == ":providers:development") {
      dependsOn ":console:servlets"
    }
    
    filter {
      includeTestsMatching '*Test'  // can override via --tests command line option
    }

    systemProperty 'edgent.test.top.dir.file.path', rootProject.projectDir
    systemProperty 'edgent.test.root.dir', rootProject.projectDir
    testLogging {
      exceptionFormat 'full'
    }
    reports {
      junitXml.enabled = true
      html.enabled = true
    }
  }

  ext.jarOptions = {
    manifest {
      attributes(
              'Implementation-Title': "${-> baseName}",
              'Implementation-Vendor': build_vendor,
              // TODO inclusion of DSTAMP/TSTAMP results in regeneration
              // of a jar when none of its contents/dependencies have changed.
              // If possible use a canned DSTAMP/TSTAMP for non-"release" tasks
              // to make the dev cycle more efficient at the expense of the TSTAMP.
              'Implementation-Version': "${commithash}-${DSTAMP}-${TSTAMP}",
              'Class-Path': mkManifestClassPath(project),
      )
    }
    metaInf {
      from rootProject.file('LICENSE')
      from rootProject.file('NOTICE')
    }
  }
  jar {
    // TODO fix this - this dependency handling shouldn't occur here,
    // rather :console:server should dependOn :console:servlets
    // (really the server doesn't exist w/o the servlets)
    if(it.path == ":test:fvtiot" ||  it.path == ":providers:development") {
      dependsOn ":console:servlets"
    }
  }
  jar.doFirst {
    configure jarOptions
  }

  task updateTargetDir() {
    description = "Copy subproject's assembled artifacts to target_dir (implicitly builds jars due to 'from jar')"    
    doLast {
      def simpleProjectGroup = getSimpleProjectGroup(project)
      
      // Copy the project's jar or war
      def relProjDirInTarget = getTargetRelProjDir(project, 'lib')
      if (relProjDirInTarget != null) {
        if (project.pluginManager.hasPlugin('war')) {
          copy {
            from war
            into "$target_java8_dir/$simpleProjectGroup/webapps"
          }
        }
        else {
          copy {
            from jar
            into "$target_java8_dir/$relProjDirInTarget"
            rename("$jar.archiveName", "$jar.baseName.$jar.extension")
          }
        }
      }
    
      // Copy SRC when appropriate
      if (simpleProjectGroup == 'samples') {
        copy {
          from(sourceSets.main.allSource.srcDirs) { include '**/*.java' }
          into "$target_java8_dir/$simpleProjectGroup/src/$project.name/src/main/java/"
        }
      }

      // Copy the project's external dependencies (transitively)
      // TODO we're getting more transitive ext deps
      // in some cases - e.g., for watson iot we "knew" we only needed a subset
      // of all watson iot deps known to maven
      
      def projectExtDir = getTargetRelProjDir(project, 'ext')
      def nonCommonExtFiles = getProjectNonCommonExtDepFiles(project)
      logger.info "$project.path copying extDepFiles jars: "+nonCommonExtFiles.collect { it.getName() }
      //println "#### $project.path copying extDepFiles jars: "+nonCommonExtFiles.collect { it.getName() }
      copy {
        from nonCommonExtFiles
        includeEmptyDirs = false
        into "$target_java8_dir/$projectExtDir"
      }
    
      // Copy core_ext_dependencies jars once
      if (!copied_core_ext_dependencies_jars) {
        copied_core_ext_dependencies_jars = true
        def coreExtJarNames = core_ext_dependencies.collect {
          mkJarNameFromSpec it
        }
        def coreExtDeps = getProjectExtDepFiles(project).findAll {
          coreExtJarNames.contains(it.getName())
        }
        logger.info "$project.path copying core_ext_dependencies_jars: "+coreExtDeps.collect { it.getName() }
        //println "#### $project.path copying core_ext_dependencies_jars: "+coreExtDeps.collect { it.getName() }
        copy {
          from coreExtDeps
          includeEmptyDirs = false
          into target_java8_ext_dir
        }
      }

      // Copy samples_ext_dependencies jars once
      if ('samples' == simpleProjectGroup && !copied_samples_ext_dependencies_jars) {
        copied_samples_ext_dependencies_jars = true
        def samplesExtJarNames = samples_ext_dependencies.collect {
          mkJarNameFromSpec it
        }
        def commonExtDeps = getProjectExtDepFiles(project).findAll {
          samplesExtJarNames.contains(it.getName())
        }
        logger.info "$project.path copying samples_ext_dependencies_jars: "+commonExtDeps.collect { it.getName() }
        //println "#### $project.path copying samples_ext_dependencies_jars: "+commonExtDeps.collect { it.getName() }
        copy {
          from commonExtDeps
          includeEmptyDirs = false
          into target_java8_ext_dir
        }
      }
      
    } // doLast
  }
  
  task sourceJar(type: Jar) {
    // baseName-appendix-version-classifier.extension
    from sourceSets.main.allJava
    classifier = 'sources'
  }  

  // support for 'gradle publishToMavanLocal' etc 
  // TODO publishing test.{fvt,svt} and samples ... doesn't seem desirable? e.g., we're excluding test.{fvt,svt} jars from the tgz
  publishing {
    publications {
      mavenJava(MavenPublication) {
        // specify dependencies like: org.apache.edgent:edgent.api.topology:0.4.0
        groupId = build_group
        artifactId = "${project.group}.${project.name}" 
        artifact sourceJar
        if (project.pluginManager.hasPlugin('war')) {
          from components.web
        }
        else {
          from components.java
        }
      }
    }
  }  
  
  // assemble: inject updating target_dir 
  assemble.finalizedBy updateTargetDir
}

task copyScripts(type: Copy) {
  description = 'Copy scripts to target_java8_dir'
  includeEmptyDirs = false
  from("scripts/") { include "**/*" }
  into "$target_java8_dir/scripts/"
}

//Create Junit Report
configurations {
  junitLibs
}
dependencies {
  junitLibs 'org.apache.ant:ant-junit:1.9.5'
  junitLibs 'org.apache.ant:ant-junit4:1.9.5'
  junitLibs 'org.jacoco:org.jacoco.ant:0.7.5.201505241946'
}

task createJunitReport << {
  description = "Generates a Junit report from all subprojects (use after 'test')"

  ant.taskdef(name: 'junitreport',
          classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
          classpath: configurations.junitLibs.asPath)
  ant.junitreport(todir: './') {
    fileset(dir: './', includes: '**/test-results/TEST-*.xml')
    report(format: 'frames', todir: "${target_report_dir}/tests")
  }
  ant.move(file: "TESTS-TestSuites.xml", tofile: "${target_report_dir}/TESTS-TestSuites.xml")
}

task jacocoTestReport << {
  description = "Generates a coverage report from all subprojects (use after 'test')"

  def libDir = new File("${target_java8_dir}", "lib")
  def utilsDir = new File("${target_java8_dir}", "utils")
  def connectorsDir = new File("${target_java8_dir}", "connectors")
  def analyticsDir = new File("${target_java8_dir}", "analytics")
  def consoleDir = new File("${target_java8_dir}", "console")

  if( !libDir.exists() ) { libDir.mkdirs() }
  if( !utilsDir.exists() ) { utilsDir.mkdirs() }
  if( !connectorsDir.exists() ) { connectorsDir.mkdirs() }
  if( !analyticsDir.exists() ) { analyticsDir.mkdirs() }
  if( !consoleDir.exists() ) { consoleDir.mkdirs() }

  FileCollection executionData = files()

  subprojects.findAll { subproject ->
    subproject.pluginManager.hasPlugin('java') && subproject.pluginManager.hasPlugin('jacoco')
  }.each { subproject ->
    executionData += subproject.tasks.jacocoTestReport.executionData
  }

  executionData = files(executionData.findAll {
    it.exists()
  })
  ant.taskdef(name: 'jacocoReport', classname: 'org.jacoco.ant.ReportTask',
          classpath: configurations.junitLibs.asPath)
  ant.jacocoReport {
    executiondata {
      executionData.addToAntBuilder(ant, 'resources')
    }

    // the 'test' task directly uses the built class files
    // (test doesn't assemble jars nor populate target_dir with them)
    jococoClassfilesFromJars = false;

    structure(name: project.name) {
      group(name: "Edgent API") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/lib", includes: "edgent.api.*.jar")
          } else {
            fileset(dir: "api", includes: "**/build/classes/main/**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./api/function/src/main/java", includes: "**/*.java")
          fileset(dir: "./api/execution/src/main/java", includes: "**/*.java")
          fileset(dir: "./api/oplet/src/main/java", includes: "**/*.java")
          fileset(dir: "./api/graph/src/main/java", includes: "**/*.java")
          fileset(dir: "./api/topology/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent SPI") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/lib", includes: "edgent.spi.*.jar")
          } else {
            fileset(dir: "spi", includes: "**/build/classes/main/**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./spi/graph/src/main/java", includes: "**/*.java")
          fileset(dir: "./spi/topology/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Runtime") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/lib", includes: "edgent.runtime.*.jar")
          } else {
            fileset(dir: "runtime", includes: "**/build/classes/main/**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./runtime/etiao/src/main/java", includes: "**/*.java")
          fileset(dir: "./runtime/jmxcontrol/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Utilities") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/utils", includes: "**/edgent.utils.*.jar")
          } else { 
            fileset(dir: "utils", includes: "**/build/classes/main/**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./utils/metrics/src/main/java", includes: "**/*.java")
          fileset(dir: "./utils/streamscope/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Connectors") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/connectors", includes: "**/edgent.connectors.*.jar")
          } else { 
            fileset(dir: "connectors", includes: "**/build/classes/main/**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./connectors/common/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/command/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/csv/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/file/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/iot/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/iotp/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/jdbc/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/kafka/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/mqtt/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/http/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/wsclient/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/wsclient-javax.websocket/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Providers") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/lib", includes: "edgent.providers.*.jar")
          } else {
            fileset(dir: "providers", includes: "**/build/classes/main/**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./providers/direct/src/main/java", includes: "**/*.java")
          fileset(dir: "./providers/development/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Analytics") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/analytics", includes: "**/edgent.analytics.*.jar")
          } else {
            fileset(dir: "analytics", includes: "**/build/classes/main/**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./analytics/math3/src/main/java", includes: "**/*.java")
          fileset(dir: "./analytics/sensors/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Console") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/console", includes: "**/edgent.console.*.jar")
          } else {
            fileset(dir: "console", includes: "**/build/classes/main/**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./console/server/src/main/java", includes: "**/*.java")
          fileset(dir: "./console/servlets/src/main/java", includes: "**/*.java")
        }
      }
    }
    html(destdir: "${target_report_dir}/coverage/")
    xml(destfile: "${target_report_dir}/coverage/jacoco-sessions.xml")
  }
}

task aggregateJavadoc(type: Javadoc) {
  description = 'Create all javadoc into target_dir/docs/javadoc'
  destinationDir file(target_javadoc_dir)
  options.addStringOption('Xdoclint:none', '-quiet')
  configure(options) {
    author = true
    version = true
    use = true
    docTitle "Apache Edgent (incubating) v${build_version}"
    footer '<a href="http://edgent.incubator.apache.org">Apache Edgent (incubating)</a>'
    bottom "Copyright &#169; 2016 The Apache Software Foundation. All Rights Reserved - ${commithash}-${DSTAMP}-${TSTAMP}"
    overview "edgent_overview.html"
    windowTitle "Edgent v${build_version}"

    group("Edgent Providers", "org.apache.edgent.providers.*")
    group("Edgent API", "org.apache.edgent.execution", "org.apache.edgent.function", "org.apache.edgent.topology", "org.apache.edgent.topology.json", "org.apache.edgent.topology.mbeans", "org.apache.edgent.topology.plumbing", "org.apache.edgent.topology.services", "org.apache.edgent.execution.*")
    group("Edgent Analytics", "org.apache.edgent.analytics.*")
    group("Edgent Utilities", "org.apache.edgent.metrics", "org.apache.edgent.metrics.*", "org.apache.edgent.streamscope", "org.apache.edgent.streamscope.*")
    group("Edgent Connectors", "org.apache.edgent.connectors.*")
    group("Edgent Samples", "org.apache.edgent.samples.*")
    group("Edgent Low-Level API", "org.apache.edgent.graph", "org.apache.edgent.graph.*", "org.apache.edgent.oplet", "org.apache.edgent.oplet.*", "org.apache.edgent.window")
    group("Edgent SPI", "org.apache.edgent.topology.spi", "org.apache.edgent.topology.spi.*")
  }
  source subprojects.collect { project -> project.sourceSets.main.allJava }
  classpath = files(subprojects.collect
          { project -> project.sourceSets.main.compileClasspath }
  )
  // Eliminate implementation packages/classes from the javadoc.
  // TODO achieve the effect w/o causing warnings from the javadoc run
  exclude "**/edgent/connectors/**/runtime"
  exclude "**/edgent/console"
  exclude "**/edgent/samples/scenarios/iotp/range/sensor"
  exclude "**/android/**"
  
  // doc-files aren't picked up automatically so get them now.
  doLast {
    copy {
      from subprojects.collect { project -> project.sourceSets.main.java.srcDirs }
      include '**/doc-files/**'
      includeEmptyDirs = false
      into target_javadoc_dir
    }
  }
}

task addVersionDotTxt {
  description = 'Add version.txt in target_dir'
  doLast {
    def map = [
      DSTAMP: "$DSTAMP",
      TSTAMP: "$TSTAMP",
      commithash: "$commithash",
      'commithash.error': "$commithash_error",
      'edgent.version': "$build_version",
      ]
    def f = new File("$target_dir/version.txt");
    f.createNewFile()
    map.forEach { k,v -> f.append "$k=$v\n" }
  }
}

task mkTargetDir << {
    def d = new File(target_dir);
    if( !d.exists() ) { d.mkdirs() }
}

task addMiscDistFiles {
  description = 'Add misc things to target_dir'
  dependsOn mkTargetDir, addVersionDotTxt
  addVersionDotTxt.mustRunAfter mkTargetDir
  doLast {
    copy { from 'LICENSE'; into target_dir }
    copy { from 'README.md'; into target_dir }
  }
}

task releaseTarGz(type: Tar) {
  description = 'Create tgz in target_dir'
  archiveName = "${build_name}-v${build_version}-${DSTAMP}-${TSTAMP}.tgz"
  compression = Compression.GZIP
  destinationDir = new File("${target_dir}/../release-edgent")
  duplicatesStrategy 'exclude'
  into "${build_name}"
  // make some things first in the tgz
  from "$target_dir/LICENSE"
  from "$target_dir/README.md"
  from "$target_dir/version.txt"
  from target_dir
  exclude '**/test/svt/'
  exclude '**/connectors/javax.websocket-server/' // just part of wsclient test harness
  doLast {
    ant.checksum algorithm: 'md5', file: archivePath
    ant.checksum algorithm: 'sha1', file: archivePath
    println "created $destinationDir/$archiveName"
  }
}  

assemble {
  description = "Assemble distribution artifacts and populate the target_dir with jars, doc, etc. Like 'build' w/o 'test'"
  dependsOn filteredSubprojects*.assemble, aggregateJavadoc, copyScripts
}

task all(dependsOn: assemble) {
  description = "alias for 'assemble'"
}

task cleanAll {
  description = 'clean aggregator'  // "release dependsOn clean" only does top-level clean
  dependsOn clean, filteredSubprojects*.clean
}

task release {
  description = 'Assemble distribution artifacts, populate target_dir, and create a release tgz'
  dependsOn cleanAll, addMiscDistFiles, assemble,
       ':platform:java7:addJava7Target', ':platform:android:addAndroidTarget',
       releaseTarGz
  addMiscDistFiles.mustRunAfter cleanAll
  assemble.mustRunAfter addMiscDistFiles
  releaseTarGz.mustRunAfter assemble,':platform:java7:addJava7Target',':platform:android:addAndroidTarget'
}

task reports {
  description = "Generate JUnit and Coverage reports of prior test run. Use after 'test'"
  dependsOn createJunitReport, jacocoTestReport
}

// build: inject test report generation and javadoc generation (for early problem detection)
// make 'build' like "all test reports"
build {
  dependsOn filteredSubprojects*.build
  finalizedBy reports // after build's test task
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}
