/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
defaultTasks 'assemble'
 
/* Configure root project */
allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  repositories {
    mavenCentral()
    maven {
      url 'https://repo.eclipse.org/content/repositories/paho-snapshots/'
    }
  }
}

apply plugin: 'java'


ext {
  commithash_error = ''
  commithash = {
    try {
      return "git rev-parse --short HEAD".execute().text.trim()
    } catch (Exception e) {
      ext.commithash_error = e
      return ''
    }
  }()
  now = new Date()
  DSTAMP = String.format('%tY%<tm%<td', now)
  TSTAMP = String.format('%tH%<tM', now)
  ext_classpath = ['com.google.code.gson:gson:2.2.4',
                   'org.slf4j:slf4j-api:1.7.12',
                   'io.dropwizard.metrics:metrics-core:3.1.2']
  target_dir = "$distsDir"
  target_java8_dir = "${ext.target_dir}/java8"
  target_java7_dir = "${ext.target_dir}/java7"
  target_android_dir = "${ext.target_dir}/android"
  target_docs_dir = "${ext.target_dir}/docs"
  target_javadoc_dir = "${ext.target_docs_dir}/javadoc"
  target_report_dir = "${ext.target_dir}/reports"
  
  aggregatorOnlyProjects = [
    ':analytics', ':api', ':apps',
    ':connectors', ':console', ':providers',
    ':runtime', ':samples', ':spi',
    ':test', ':utils'
  ]
  
  filteredSubprojects = subprojects*.findAll { 
    project -> !aggregatorOnlyProjects.contains(project.path)
  }
}

/* Configure subprojects */
subprojects {

  // ignore aggregator only projects so we don't assemble empty jars, etc for them.
  if (aggregatorOnlyProjects.contains(project.path)) {
    return
  }

  apply plugin: 'maven-publish'
  apply plugin: 'java'
  apply plugin: "jacoco"
  ext.artifact = project.name
  //group = 'org.apache.edgent'
 
  if (buildFile.isFile() && !buildFile.exists()) {
    configurations.create('default')
    return
  }

  if (["javax.websocket-client", "javax.websocket-server", "edgent.javax.websocket"].contains(project.name)) {
    archivesBaseName = "${project.name}"
  } else {
    archivesBaseName = "${rootProject.name}${project.path.replace(':', '.')}"
  }
  version = build_version

  dependencies {
    testCompile 'junit:junit:4.10'
    testRuntime 'org.slf4j:slf4j-jdk14:1.7.12'
  }

  ext.addCompileTestDependencies = { String... deps ->
    deps.each { dep ->
      dependencies {
        testCompile project(dep).sourceSets.test.output
      }
      compileTestJava {
        dependsOn "${dep}:testClasses"
      }
    }
  }

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  def compileOptions = {
    options.debugOptions.debugLevel = 'source,lines,vars'
    options.verbose = logger.isDebugEnabled()
    options.listFiles = logger.isInfoEnabled()
    options.deprecation = true
    options.encoding = 'UTF-8'
  }
  compileJava {
    configure compileOptions
  }
  compileTestJava {
    configure compileOptions
  }

  test {
    // TODO fix this - this dependency handling shouldn't occur here,
    // rather :console:server should dependOn :console:servlets
    // (really the server doesn't exist w/o the servlets)
    if(it.path == ":test:fvtiot" ||  it.path == ":providers:development") {
      dependsOn ":console:servlets"
    }
    include '**/*Test.class'

    systemProperty 'edgent.test.top.dir.file.path', rootProject.projectDir
    systemProperty 'edgent.test.root.dir', rootProject.projectDir
    testLogging {
      exceptionFormat 'full'
    }
    reports {
      junitXml.enabled = true
      html.enabled = true
    }
  }

  ext.jarOptions = {
    manifest {
      attributes(
              'Implementation-Title': "${-> baseName}",
              'Implementation-Vendor': build_vendor,
              'Implementation-Version': "${commithash}-${DSTAMP}-${TSTAMP}",
              // TODO Class-Path attribute
      )
    }
    metaInf {
      from rootProject.file('LICENSE')
      from rootProject.file('NOTICE')
    }
  }
  jar {
    // TODO fix this - this dependency handling shouldn't occur here,
    // rather :console:server should dependOn :console:servlets
    // (really the server doesn't exist w/o the servlets)
    if(it.path == ":test:fvtiot" ||  it.path == ":providers:development") {
      dependsOn ":console:servlets"
    }
    configure jarOptions
  }

  task sourceJar(type: Jar) {
    // baseName-appendix-version-classifier.extension
    from sourceSets.main.allJava
    classifier = 'sources'
  }


  task copyJar(type: Copy) {
    description = "Copy subproject's assembled artifacts to target_dir (implicitly builds jars due to 'from jar')"
    def projectGroup = "$project.group".replace("edgent.", "")

    if (["api", "providers", "runtime", "spi"].contains(projectGroup)) {
      // println "copyJar(cfg) lib $project.group $projectGroup $project.name $jar.archiveName"
      from jar
      into "${rootProject.ext.target_java8_dir}/lib"
      rename("$jar.archiveName", "$jar.baseName.$jar.extension")
    } 
    else if (["samples"].contains(projectGroup)) {
      // println "copyJar(cfg) samples $project.group $projectGroup $project.name $jar.archiveName"
      from jar
      into "${rootProject.ext.target_java8_dir}/$projectGroup/lib"
      rename("$jar.archiveName", "$jar.baseName.$jar.extension")

      //Copy Sample SRC to dist
      doLast {
        copy {
          from(sourceSets.main.allSource.srcDirs) { include '**/*.java' }
          into "${rootProject.ext.target_java8_dir}/$projectGroup/src/$project.name/src/main/java/"
        }
      }
    } 
    else {
      // println "copyJar(cfg) other $project.group $projectGroup $project.name $jar.archiveName"
      from jar
      into "${rootProject.ext.target_java8_dir}/$projectGroup/$project.name/lib"
      rename("$jar.archiveName", "$jar.baseName.$jar.extension")
      
      // Copy console.war  (should be more general but this works for now)
      if (projectGroup == 'console' && project.name == 'servlets') {
        doLast {
          copy {
            from war
            into "${rootProject.ext.target_java8_dir}/$projectGroup/webapps"
          }
        }
      } 
    }
  }

  publishing {
     publications {
        mavenJava(MavenPublication) {
	   groupId "org.apache.edgent"
           artifactId "$project.group".replace("edgent.", "") + "." + artifact
	   version build_version
           artifact sourceJar

	   from components.java
        }
     }
  }
  
  // assemble: inject updating target_dir 
  assemble.finalizedBy copyJar
}

task copyScripts(type: Copy) {
  description = 'Copy scripts to target_java8_dir'
  includeEmptyDirs = false
  from("scripts/") { include "**/*" }
  into "${rootProject.ext.target_java8_dir}/scripts/"
}

//Create Junit Report
configurations {
  junitLibs
}
dependencies {
  junitLibs 'org.apache.ant:ant-junit:1.9.5'
  junitLibs 'org.apache.ant:ant-junit4:1.9.5'
  junitLibs 'org.jacoco:org.jacoco.ant:0.7.5.201505241946'
}

task createJunitReport << {
  description = "Generates a Junit report from all subprojects (use after 'test')"

  ant.taskdef(name: 'junitreport',
          classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
          classpath: configurations.junitLibs.asPath)
  ant.junitreport(todir: './') {
    fileset(dir: './', includes: '**/test-results/TEST-*.xml')
    report(format: 'frames', todir: "${target_report_dir}/tests")
  }
  ant.move(file: "TESTS-TestSuites.xml", tofile: "${target_report_dir}/TESTS-TestSuites.xml")
}

task jacocoTestReport << {
  description = "Generates a coverage report from all subprojects (use after 'test')"

  def libDir = new File("${target_java8_dir}", "lib")
  def utilsDir = new File("${target_java8_dir}", "utils")
  def connectorsDir = new File("${target_java8_dir}", "connectors")
  def analyticsDir = new File("${target_java8_dir}", "analytics")
  def consoleDir = new File("${target_java8_dir}", "console")

  if( !libDir.exists() ) { libDir.mkdirs() }
  if( !utilsDir.exists() ) { utilsDir.mkdirs() }
  if( !connectorsDir.exists() ) { connectorsDir.mkdirs() }
  if( !analyticsDir.exists() ) { analyticsDir.mkdirs() }
  if( !consoleDir.exists() ) { consoleDir.mkdirs() }

  FileCollection executionData = files()

  subprojects.findAll { subproject ->
    subproject.pluginManager.hasPlugin('java') && subproject.pluginManager.hasPlugin('jacoco')
  }.each { subproject ->
    executionData += subproject.tasks.jacocoTestReport.executionData
  }

  executionData = files(executionData.findAll {
    it.exists()
  })
  ant.taskdef(name: 'jacocoReport', classname: 'org.jacoco.ant.ReportTask',
          classpath: configurations.junitLibs.asPath)
  ant.jacocoReport {
    executiondata {
      executionData.addToAntBuilder(ant, 'resources')
    }

    // the 'test' task directly uses the built class files
    // (test doesn't assemble jars nor populate target_dir with them)
    jococoClassfilesFromJars = false;
    
    structure(name: project.name) {
      group(name: "Edgent API") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/lib", includes: "edgent.api.*.jar")
          } else {
            fileset(dir: "api", includes: "**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./api/function/src/main/java", includes: "**/*.java")
          fileset(dir: "./api/execution/src/main/java", includes: "**/*.java")
          fileset(dir: "./api/oplet/src/main/java", includes: "**/*.java")
          fileset(dir: "./api/graph/src/main/java", includes: "**/*.java")
          fileset(dir: "./api/topology/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent SPI") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/lib", includes: "edgent.spi.*.jar")
          } else {
            fileset(dir: "spi", includes: "**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./spi/graph/src/main/java", includes: "**/*.java")
          fileset(dir: "./spi/topology/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Runtime") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/lib", includes: "edgent.runtime.*.jar")
          } else {
            fileset(dir: "runtime", includes: "**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./runtime/etiao/src/main/java", includes: "**/*.java")
          fileset(dir: "./runtime/jmxcontrol/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Utilities") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/utils", includes: "**/edgent.utils.*.jar")
          } else { 
            fileset(dir: "utils", includes: "**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./utils/metrics/src/main/java", includes: "**/*.java")
          fileset(dir: "./utils/streamscope/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Connectors") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/connectors", includes: "**/edgent.connectors.*.jar")
          } else { 
            fileset(dir: "connectors", includes: "**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./connectors/common/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/command/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/csv/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/file/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/iot/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/iotp/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/jdbc/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/kafka/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/mqtt/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/http/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/wsclient/src/main/java", includes: "**/*.java")
          fileset(dir: "./connectors/wsclient-javax.websocket/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Providers") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/lib", includes: "edgent.providers.*.jar")
          } else {
            fileset(dir: "providers", includes: "**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./providers/direct/src/main/java", includes: "**/*.java")
          fileset(dir: "./providers/development/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Analytics") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/analytics", includes: "**/edgent.analytics.*.jar")
          } else {
            fileset(dir: "analytics", includes: "**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./analytics/math3/src/main/java", includes: "**/*.java")
          fileset(dir: "./analytics/sensors/src/main/java", includes: "**/*.java")
        }
      }
      group(name: "Edgent Console") {
        classfiles {
          if (jococoClassfilesFromJars) {
            fileset(dir: "${target_java8_dir}/console", includes: "**/edgent.console.*.jar")
          } else {
            fileset(dir: "console", includes: "**/*.class")
          }
        }
        sourcefiles {
          fileset(dir: "./console/server/src/main/java", includes: "**/*.java")
          fileset(dir: "./console/servlets/src/main/java", includes: "**/*.java")
        }
      }
    }
    html(destdir: "${target_report_dir}/coverage/")
    xml(destfile: "${target_report_dir}/coverage/jacoco-sessions.xml")
  }
}

task aggregateJavadoc(type: Javadoc) {
  description = 'Create all javadoc into target_dir/docs/javadoc'
  destinationDir file("$rootProject.ext.target_javadoc_dir")
  options.addStringOption('Xdoclint:none', '-quiet')
  configure(options) {
    author = true
    version = true
    use = true
    docTitle "Apache Edgent (incubating) v${build_version}"
    footer '<a href="http://edgent.incubator.apache.org">Apache Edgent (incubating)</a>'
    bottom "Copyright &#169; 2016 The Apache Software Foundation. All Rights Reserved - ${rootProject.ext.commithash}-${DSTAMP}-${TSTAMP}"
    overview "edgent_overview.html"
    windowTitle "Edgent v${build_version}"

    group("Edgent Providers", "org.apache.edgent.providers.*")
    group("Edgent API", "org.apache.edgent.execution", "org.apache.edgent.function", "org.apache.edgent.topology", "org.apache.edgent.topology.json", "org.apache.edgent.topology.mbeans", "org.apache.edgent.topology.plumbing", "org.apache.edgent.topology.services", "org.apache.edgent.execution.*")
    group("Edgent Analytics", "org.apache.edgent.analytics.*")
    group("Edgent Utilities", "org.apache.edgent.metrics", "org.apache.edgent.metrics.*", "org.apache.edgent.streamscope", "org.apache.edgent.streamscope.*")
    group("Edgent Connectors", "org.apache.edgent.connectors.*")
    group("Edgent Samples", "org.apache.edgent.samples.*")
    group("Edgent Low-Level API", "org.apache.edgent.graph", "org.apache.edgent.graph.*", "org.apache.edgent.oplet", "org.apache.edgent.oplet.*", "org.apache.edgent.window")
    group("Edgent SPI", "org.apache.edgent.topology.spi", "org.apache.edgent.topology.spi.*")
  }
  source subprojects.collect { project -> project.sourceSets.main.allJava }
  classpath = files(subprojects.collect
          { project -> project.sourceSets.main.compileClasspath }
  )
  // Eliminate implementation packages/classes from the javadoc.
  // TODO achieve the effect w/o causing warnings from the javadoc run
  exclude "**/edgent/connectors/**/runtime"
  exclude "**/edgent/console"
  exclude "**/edgent/samples/scenarios/iotp/range/sensor"
  
  // doc-files aren't picked up automatically so get them now.
  doLast {
    copy {
      from subprojects.collect { project -> project.sourceSets.main.java.srcDirs }
      include '**/doc-files/**'
      includeEmptyDirs = false
      into "$rootProject.ext.target_javadoc_dir"
    }
  }
}

task addVersionDotTxt {
  description = 'Add version.txt in target_dir'
  doLast {
    def map = [
      DSTAMP: "$DSTAMP",
      TSTAMP: "$TSTAMP",
      commithash: "$commithash",
      'commithash.error': "$commithash_error",
      'edgent.version': "$build_version",
      ]
    def f = new File("${rootProject.ext.target_dir}/version.txt");
    f.createNewFile()
    map.forEach { k,v -> f.append "$k=$v\n" }
  }
}

task mkTargetDir << {
    def d = new File(rootProject.ext.target_dir);
    if( !d.exists() ) { d.mkdirs() }
}

task addMiscDistFiles {
  description = 'Add misc things to target_dir'
  dependsOn mkTargetDir, addVersionDotTxt
  addVersionDotTxt.mustRunAfter mkTargetDir
  doLast {
    copy { from 'LICENSE'; into target_dir }
    copy { from 'README.md'; into target_dir }
  }
}

task releaseTarGz(type: Tar) {
  description = 'Create tgz in target_dir'
  archiveName = "${build_name}-v${build_version}-${DSTAMP}-${TSTAMP}.tgz"
  compression = Compression.GZIP
  destinationDir = new File("${target_dir}/../release-edgent")
  duplicatesStrategy 'exclude'
  into "${build_name}"
  // make some things first in the tgz
  from "${rootProject.ext.target_dir}/LICENSE"
  from "${rootProject.ext.target_dir}/README.md"
  from "${rootProject.ext.target_dir}/version.txt"
  from rootProject.ext.target_dir
  doLast {
    ant.checksum algorithm: 'md5', file: archivePath
    ant.checksum algorithm: 'sha1', file: archivePath
    println "created $destinationDir/$archiveName"
  }
}  

assemble {
  description = "Assemble distribution artifacts and populate the target_dir with jars, doc, etc. Like 'build' w/o 'test'"
  dependsOn filteredSubprojects*.assemble, aggregateJavadoc, copyScripts
}

task all(dependsOn: assemble) {
  description = "alias for 'assemble'"
}

task cleanAll {
  description = 'clean aggregator'  // "release dependsOn clean" only does top-level clean
  dependsOn clean, filteredSubprojects*.clean
}

task release {
  description = 'Assemble distribution artifacts, populate target_dir, and create a release tgz'
  dependsOn cleanAll, addMiscDistFiles, assemble, releaseTarGz
  addMiscDistFiles.mustRunAfter cleanAll
  all.mustRunAfter addMiscDistFiles
  releaseTarGz.mustRunAfter assemble
}

task reports {
  description = "Generate JUnit and Coverage reports of prior test run. Use after 'test'"
  dependsOn createJunitReport, jacocoTestReport
}

// build: inject test report generation and javadoc generation (for early problem detection)
// make 'build' like "all test reports"
build {
  dependsOn filteredSubprojects*.build
  finalizedBy reports // after build's test task
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}
