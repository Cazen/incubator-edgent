/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Configure root project */
apply plugin: 'java'
ext.commithash = {
  try {
    return "git rev-parse --short HEAD".execute().text.trim()
  } catch (Exception e) {
    return ''
  }
}()
def now = new Date()
ext.DSTAMP = String.format('%tY%<tm%<td', now)
ext.TSTAMP = String.format('%tH%<tM', now)
ext.ext_classpath = ['com.google.code.gson:gson:2.2.4',
  'org.slf4j:slf4j-api:1.7.12',
  'io.dropwizard.metrics:metrics-core:3.1.2']
ext.target_dir = "$distsDir"
ext.target_java8_dir = "${ext.target_dir}/java8"
ext.target_javadoc_dir = "${ext.target_dir}/docs/javadoc"

/* Configure subprojects */
subprojects {
  if (!buildFile.exists()) {
    configurations.create('default')
    return
  }
  repositories {
    mavenCentral()
    maven {
      url 'https://repo.eclipse.org/content/repositories/paho-snapshots/'
    }
  }

  plugins.apply 'java'
  plugins.apply 'jacoco'

  if(["javax.websocket-client", "javax.websocket-server", "edgent.javax.websocket"].contains(project.name)) {
    archivesBaseName = "${project.name}"
  } else{
    archivesBaseName = "${rootProject.name}${project.path.replace(':', '.')}"
  }
  version = build_version

  jacoco {
    toolVersion = '0.7.5.201505241946'
  }

  dependencies {
    testCompile 'junit:junit:4.10'
    testRuntime 'org.slf4j:slf4j-jdk14:1.7.12'
  }

  ext.addCompileTestDependencies = { String... deps ->
    deps.each { dep ->
      dependencies {
        testCompile project(dep).sourceSets.test.output
      }
      compileTestJava {
        dependsOn "${dep}:testClasses"
      }
    }
  }

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
  def compileOptions = {
    options.debugOptions.debugLevel = 'source,lines,vars'
    options.verbose = logger.isDebugEnabled()
    options.listFiles = logger.isInfoEnabled()
    options.deprecation = true
    options.encoding = 'UTF-8'
  }
  compileJava {
    configure compileOptions
  }
  compileTestJava {
    configure compileOptions
  }

  test {
    include '**/*Test.class'

    systemProperty 'edgent.test.top.dir.file.path', rootProject.projectDir
    systemProperty 'edgent.test.root.dir', rootProject.projectDir
    testLogging {
      exceptionFormat 'full'
    }
  }

  ext.jarOptions = {
    manifest {
      attributes(
        'Implementation-Title': "${-> baseName}",
        'Implementation-Vendor': build_vendor,
        'Implementation-Version': "${commithash}-${DSTAMP}-${TSTAMP}",
        // TODO Class-Path attribute
      )
    }
    metaInf {
      from rootProject.file('LICENSE')
      from rootProject.file('NOTICE')
    }
  }
  jar {
    configure jarOptions
  }

  task copyJar(type: Copy) {
    def projectGroup = "$project.group".replace("edgent.", "")
    if (["api", "providers", "runtime", "spi"].contains(projectGroup)) {
      from jar
      into "${rootProject.ext.target_java8_dir}/" + "/lib"
      rename("$jar.archiveName", "$jar.baseName.$jar.extension")
    }else if(["samples"].contains(projectGroup)){
      from jar
      into "${rootProject.ext.target_java8_dir}/" + projectGroup + "/lib"
      rename("$jar.archiveName", "$jar.baseName.$jar.extension")

      //Copy Sample SRC to dist
      copy {
        into "${rootProject.ext.target_java8_dir}/" + projectGroup + "/src/$project.name/src/main/java/"
        from(sourceSets.main.allSource.srcDirs) {
          include '**/*.java'
        }
      }
    }else{
      from jar
      into "${rootProject.ext.target_java8_dir}/" + projectGroup + "/$project.name".replaceAll(":", "/") + "/lib"
      rename("$jar.archiveName", "$jar.baseName.$jar.extension")
    }
  }

  copyJar.dependsOn assemble
  build.dependsOn copyJar
}

task copyScript {
  copy {
    includeEmptyDirs = false
    from "scripts/"
    into "${rootProject.ext.target_java8_dir}/scripts/"
    include "**/*"
  }
}

task aggregateJavadoc(type: Javadoc) {
  destinationDir file("$rootProject.ext.target_javadoc_dir")
  options.addStringOption('Xdoclint:none', '-quiet')
  configure(options) {
    author = true
    version = true
    use = true
    docTitle "Apache Edgent (incubating) v${build_version}"
    footer '<a href="http://edgent.incubator.apache.org">Apache Edgent (incubating)</a>'
    bottom "Copyright &#169; 2016 The Apache Software Foundation. All Rights Reserved - ${rootProject.ext.commithash}-${DSTAMP}-${TSTAMP}"
    overview "edgent_overview.html"
    windowTitle "Edgent v${build_version}"

    group("Edgent API", "org.apache.edgent.execution", "org.apache.edgent.function", "org.apache.edgent.topology", "org.apache.edgent.topology.json", "org.apache.edgent.topology.mbeans", "org.apache.edgent.topology.plumbing", "org.apache.edgent.topology.services", "org.apache.edgent.execution.*")
    group("Edgent Providers", "org.apache.edgent.providers.*")
    group("Edgent Connectors", "org.apache.edgent.connectors.*")
    group("Edgent Samples", "org.apache.edgent.samples.*")
    group("Edgent Analytics", "org.apache.edgent.analytics.*")
    group("Edgent Utilities", "org.apache.edgent.metrics", "org.apache.edgent.metrics.*", "org.apache.edgent.streamscope", "org.apache.edgent.streamscope.*")
    group("Edgent Low-Level API", "org.apache.edgent.graph", "org.apache.edgent.graph.*", "org.apache.edgent.oplet", "org.apache.edgent.oplet.*", "org.apache.edgent.window")
    group("Edgent SPI", "org.apache.edgent.topology.spi", "org.apache.edgent.topology.spi.*")
  }
  source subprojects.collect { project -> project.sourceSets.main.allJava }
  classpath = files(subprojects.collect
          { project -> project.sourceSets.main.compileClasspath }
  )
  
  // doc-files aren't picked up automatically so get them now.
  doLast {
    copy {
      from subprojects.collect { project -> project.sourceSets.main.java.srcDirs }
      include '**/doc-files/**'
      includeEmptyDirs = false
      into "$rootProject.ext.target_javadoc_dir"
    }
  }
}

build.dependsOn aggregateJavadoc

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}
